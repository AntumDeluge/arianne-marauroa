package marauroa;

import java.awt.*;
import java.applet.*;

import marauroa.game.*;
import marauroa.net.*;
import java.io.*;

public class JMarauroa extends javax.swing.JFrame {
	private short clientid;

    /** Creates new form fmarauroa */
    public JMarauroa() {
        initComponents();
        clientid=-10;
    }

    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new JMarauroa().show();
    }
    

    private NetworkClientManager netMan;
    
    /** Initializes the applet jmarauroa */
    public void init() {
   
        initComponents();
          
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        titleLabel = new javax.swing.JLabel();
        reportsPanel = new javax.swing.JPanel();
        reportsTextArea = new javax.swing.JTextArea();
        connectButton = new javax.swing.JButton();
        chooseCharacterButton = new javax.swing.JButton();
        actionButton = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();

        titleLabel.setText("Marauroa test client");
        titleLabel.setMinimumSize(new java.awt.Dimension(114, 32));
        titleLabel.setPreferredSize(new java.awt.Dimension(114, 32));
        titleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        getContentPane().add(titleLabel, java.awt.BorderLayout.NORTH);

        reportsPanel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        reportsPanel.setMaximumSize(new java.awt.Dimension(32767, 300));
        reportsPanel.setMinimumSize(new java.awt.Dimension(600, 300));
        reportsPanel.setPreferredSize(new java.awt.Dimension(600, 300));
        reportsTextArea.setEditable(false);
        reportsTextArea.setLineWrap(true);
        //reportsTextArea.setFont(new java.awt.Font("Arial", 0, 10));
        reportsTextArea.setMinimumSize(new java.awt.Dimension(580, 200));
        reportsTextArea.setPreferredSize(new java.awt.Dimension(580, 200));
        reportsTextArea.setAutoscrolls(true);
        reportsPanel.add(reportsTextArea);

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        reportsPanel.add(connectButton);

        chooseCharacterButton.setText("Character");
        chooseCharacterButton.setEnabled(false);
        chooseCharacterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseCharacterButtonActionPerformed(evt);
            }
        });

        reportsPanel.add(chooseCharacterButton);

        actionButton.setText("Action");
        actionButton.setEnabled(false);
        actionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionButtonActionPerformed(evt);
            }
        });

        reportsPanel.add(actionButton);

        disconnectButton.setText("Disconnect");
        disconnectButton.setEnabled(false);
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        reportsPanel.add(disconnectButton);

        getContentPane().add(reportsPanel, java.awt.BorderLayout.WEST);
        pack();
    }//GEN-END:initComponents

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        // Add your handling code here:
        /* TODO: Write here the code to send Logout message */
        netMan.finish();
        
        connectButton.setEnabled(true);
        chooseCharacterButton.setEnabled(false);
        disconnectButton.setEnabled(false);
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void actionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionButtonActionPerformed
        // Add your handling code here:
       /* TODO: Write here the code to send Action message */
    }//GEN-LAST:event_actionButtonActionPerformed

    private void chooseCharacterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseCharacterButtonActionPerformed
        // Add your handling code here:
        /* TODO: Write here the code to send Choose Character message */
        reportsTextArea.append("\n"+"MrBean choosen");
        Message msg=new MessageC2SChooseCharacter(null,"MrBean");
        msg.setClientID(clientid);
        
        netMan.addMessage(msg);
        
        Message msgReply=null;
        while(msgReply==null)
          {
          msgReply=netMan.getMessage();
          
          if(msgReply==null) continue;
          
          if(msgReply.getType()==Message.TYPE_S2C_CHOOSECHARACTER_ACK)
            {
            reportsTextArea.append("\n"+"Character choosen correctly");
            }

          if(msgReply.getType()==Message.TYPE_S2C_CHOOSECHARACTER_NACK)
            {
            reportsTextArea.append("\n"+"Character not choosen. Error.");
            }
          }
            
        
        chooseCharacterButton.setEnabled(false);
        actionButton.setEnabled(true);
    }//GEN-LAST:event_chooseCharacterButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // Add your handling code here:
        /* Todo: Write here the code to send Login message */
        reportsTextArea.append("\n"+"Starting network client manager");
        try
          {
          netMan=new NetworkClientManager("127.0.0.1");
          }
        catch(java.net.SocketException e)
          {
          ByteArrayOutputStream out= new ByteArrayOutputStream();
          e.printStackTrace(new PrintStream(out));
                   
          reportsTextArea.append("\n"+"Exception starting network client manager");
          reportsTextArea.append("\n"+out.toString());          
          }
          
        MessageC2SLogin msg=new MessageC2SLogin(null,"Test Player","Test Password");
        netMan.addMessage(msg);
        
        boolean LoginCorrect=false;
        Message msgReply=null;
        while(msgReply==null)
          {
          msgReply=netMan.getMessage();
          
          if(msgReply==null) continue;
          
          if(msgReply.getType()==Message.TYPE_S2C_LOGIN_NACK)
            {
            reportsTextArea.append("\n"+"Login reject because "+((MessageS2CLoginNACK)msgReply).getResolution());
            }
            
          if(msgReply.getType()==Message.TYPE_S2C_LOGIN_ACK)
            {
            reportsTextArea.append("\n"+"Login successful");
            clientid=msgReply.getClientID();
            System.out.println("Recieved clientid: "+clientid);
            LoginCorrect=true;
            }          
          }

	    msgReply=null;
        while(LoginCorrect && (msgReply==null))
          {
          msgReply=netMan.getMessage();

          if(msgReply==null) continue;

          if(msgReply.getType()==Message.TYPE_S2C_CHARACTERLIST)
            {
            reportsTextArea.append("\n"+"Character list received");
            String[] characters=((MessageS2CCharacterList)msgReply).getCharacters();
            for(int i=0;i<characters.length;++i)
              {
              reportsTextArea.append("\n- "+characters[i]);
              }
            }          
          }
        
        disconnectButton.setEnabled(true);
        chooseCharacterButton.setEnabled(true);
        connectButton.setEnabled(false);
    }//GEN-LAST:event_connectButtonActionPerformed

    public void destroy() {
    }    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actionButton;
    private javax.swing.JButton chooseCharacterButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JPanel reportsPanel;
    private javax.swing.JTextArea reportsTextArea;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
    
}
