-------------------------------------------------------------------------------
| This program is free software; you can redistribute it and/or modify it under        
| the terms of the GNU General Public License as published by the Free Software
| Foundation.
| 
| This program is distributed in the hope that it will be useful, but WITHOUT 
| ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
| FOR A PARTICULAR PURPOSE.  See the file LICENSE for more details.
-------------------------------------------------------------------------------


NOTE: Concurrently I am adding support for Multizones, so please don't use this
for tests or production as it WON'T work correctly or may even not compile.
Promise to have it fixed and working in 7 days.

Miguel, 2004/08/24


Marauroa
--------
Marauroa is a Multiplayer Online Engine Server, that you can use to build 
you own online games using Marauroa as a Content Management system.

Marauroa is completly written in Java using a multithreaded server architecture
with a UDP oriented network protocol, a mySQL based persistence engine and a 
flexible game system based on open systems totally expandible and modifiable 
by developers and that is able to run scripts on Python for the game's rules.
 
Marauroa is based on a philosophy we call Action/Perception, on each turn a 
perception is sent to clients explaining them what they percieve and clients 
can ask server to do any action in their names using actions.
Marauroa is totally game agnostic and makes very little assumptions about what 
are you trying to do, allowing a great freedom to create whatever type of game 
you want.
Bugs are facts of life, they just happen. But Arianne is fully tested using 
Test Units with JUnit and cppunit, so all modules are tested for most common 
cases, allowing a better quality software to be deployed. Your cooperation 
reporting problems is simply invaluable: You are our best developer and we want
to read from you.

You can find the latest version of Marauroa at: 
http://arianne.sourceforge.net

Marauroa is a GPL project.


Current Version
---------------
Version 0.41


Status
------
Marauroa is playable.

Version > 0.20 Contains a simple Gladiators game using the Marauroa engine.
You need Arianne's Gladiator client in order to be able to play.

Version > 0.33 Contains a multiplayer pacman game using the Python rules.


Requeriments
------------
To actually compile Marauroa you will need:
- Java SDK 1.4 http://java.sun.com
- JUnit 1.3.8 http://junit.sourceforge.net
- Ant 1.6 http://ant.apache.org
- Jython 2.1 http://www.jython.org/download.html

In order to get it working with MySQL you will also need:
- MySQL Connector/J http://www.mysql.com/downloads/api-jdbc-stable.html

Optionally if you want to build the java 3D Gladiators client:
- JOrbis 0.0.12 http://www.jcraft.com/jorbis/
- Quake 2 MD2 Loader http://www.newdawnsoftware.com/resources/j3d.html
- Loader3DS http://www.starfireresearch.com/services/java3d/inspector3ds.html


Build
-----
First, install Java, JUnit, Ant, and Jython
  NOTE: Do not install Jython on a directory path that contains spaces.

Second, set junit.jar and jython.jar on the classpath.
  For Example:
  set classpath=%classpath%;C:\junit3.8.1\junit.jar
  set classpath=%classpath%;C:\junit3.8.1\junit.jar

Third, move to the marauroa directory.
  cd C:\marauroa (Windows)
  or
  cd /foo/bar/marauroa (UNIX)

Fourth, run ant jar.
  ant jar
  or
  ant -Dlibdir=./dependencies jar
  
  Where dependencies is a directory that contains all the libraries, you can omit 
  it if you have correctly configured your classpath. NOTE: ??This may not work
  on in the current version or possible on Windows??

  BUILD SUCCESSFUL Total time: 3 seconds

  You will have a marauroa-<version>.jar file in the lib folder. Nice, isn't it? 

Last, run ant docs to generate the API documentation.


Running
-------
Ok, you have compiled Marauroa. Now what to do?

Well, if you have built a Marauroa server it is because you 
want to play with the server either because you want to run your own
game server or because you are a developer wanting to develop your own game. 
If you don't understand the above it is prone that you are looking for 
http://arianne.sourceforge.net instead.

- Configuration
Once we have build Arianne the next step is to setup the configuration file.
Each game features a configuration file that will configure the server to run
that particular game.

# Please don't remove. Needed for test cases.
test_ATestString=ATestString

# The database type
# Options are:
#   - MemoryPlayerDatabase
#   - JDCBPlayerDatabase
marauroa_DATABASE=MemoryPlayerDatabase

# JDBC Database configuration
jdbc_url=jdbc:mysql://127.0.0.1/marauroa
jdbc_class=com.mysql.jdbc.Driver
jdbc_user=marauroa_dbuser
jdbc_pwd=marauroa_dbpwd

# Network configuration of Marauroa
marauroa_PORT=3214

# RP Configuration ( This is provisional )
rp_RPZoneClass=marauroa.game.MarauroaRPZone
rp_RPRuleProcessorClass=marauroa.game.MarauroaRPRuleProcessor
rp_turnDuration=60000

# Server related configuration
# Types of game are:
#   - marauroa
#   - simplegame
#   - the1001
# Changes should be related to rp_RPZoneClass and rp_RPRuleProcessorClass
server_typeGame=marauroa

server_name=Marauroa jserver
server_version=@version@
server_contact=https://sourceforge.net/tracker/?atid=514826&group_id=66537&func=browse

# Place where Statistics and server activity report are generated.
server_stats_directory=~/public_html
server_logs_directory=~/.marauroa

Let see each section invidually. 

Database

Our first item is marauroa_DATABASE, this attribute set the type of database 
that you will use:
MemoryPlayerDatabase, this type of database is prebuilt in memory and so to 
modify it you need to recompile server and manually edit sources to add new 
accounts. Obviously when application is shut down everything modified is 
discarted.
JDBCPlayerDatabase, this is mainly a MySQL database. It won't run as-is on 
other SQL compliant database because it uses MySQL features as special tables
types to get transactions and auto_increment column types to generate pk.

My recomendation is that you should embrace MySQL and choose JDBCPlayerDatabase.

The next section describe the connection string to the database.
jdbc_url=jdbc:mysql://127.0.0.1/marauroa
This attribute explain where the database is running (127.0.0.1)_and that is 
the name of the database (marauroa).
jdbc_class=com.mysql.jdbc.Driver 
the class that describe the driver used for this JDBC connection
jdbc_user=marauroa_dbuser 
username of the database account for marauroa
jdbc_pwd=marauroa_dbpwd 
password of the database account for marauroa

Remember that to setup the database you need to enter into MySQL as 
administrator and run: 

  create database marauroa; 
  grant all on marauroa.* to marauroa_dbuser@<serverip> identified by 'marauroa_dbpwd';

The marauroa_PORT section defines in which TCP/IP port it will run. All the 
traffic of Marauroa is UDP based.

The next section talks about the Role playing engine configuration:
rp_RPZoneClass points to the class that contains our game RPZone logic
rp_RPRuleProcessorClass points to the class that contains our game 
RPRuleProcessor logic
rp_turnDuration defines the turn time. The lower the turn time the more 
bandwidth is prone to be used.

The available games actually now are:
the1001
mapacman

It should be set at server_typeGame

The server section contains information that will be sent the clients using the
Server info message, so whatever that begins with server_ is sent on that 
message to clients.

Finally you should define where the output of statistics and logs messages 
should be done:
server_stats_directory defines the folder where the statistics files are 
generated, usually a public HTML folder.
server_logs_directory defines where to store the logs. Please keep this one safe

- Running
Once you have it configured just run the server by doing

  java -classpath marauroa.jar;mysql-connector-java-3.0.7-stable-bin.jar marauroa.marauroad -c <game.ini> -l

This will make the server to start
Creating accounts

Before anything else happens you MUST create accounts for your players. The idea
is simple enough to you can even wrap it with a webpage much like we did with 
http://gladiators.game-server.cc

<game>.<game>createaccount -u <user> -p <password> -c <character> -e <email>

For example in mapacman
mapacman.mapacmancreateaccount -u root -p pazzw0rd -c MaSSive -e root@localhost.com

Each game has a different number of parameters, check it with the -h parameter.
Testing

To test that you connection is working use nullClient. It is a simple client 
that connect to server, choose character and receive perceptions. Just that, if
it works it means that everything else is also working.

  java -classpath marauroa.jar marauroa.nullClient -u root -p pazzw0rd -c MaSSive

Playing with clients

Read instead the clients pages at http://arianne.sourceforge.net


Changelog
---------
0.41 Jul 13, 2004
- Cleaned code
- Added javadocs comments
- Fixed a bug at RPZone where modify modified objects not belonging to that zone.
- Improved mapacman script
- Added out of sync logic on clients
- Fixed a bug related to out of sync at server.

0.40 Jul 05, 2004
- Added score to ghost to count players killed
- Changed the calling order in RPAImanager
- Added classes of RPObjects: RPClass
- Improved the speed feeling on the game by a change on RPServerManager
- Added per player synchronization
- Fixed horrible bug at delta^2 perception system

0.36 Jun 04, 2004
- Database modified to stored hashed passwords
- Fixed the two turns delay on actions
- Compressed RPMap message
- Added command line support for nullClient 
- Improved mapacman support
- Fixed bug that happens when client exits on timeout

0.35   May 25, 2004
- Changed RPMap message
- Client can try to resync using old perceptions
- Fixed bugs at mapacman_script.py 
- Reused PythonRPRuleProcessor
- Added command line help to server
- Removed simplegame

0.34	May 17, 2004
- Added out of sync message
- Improved perception creation

0.33 	May 01, 2004
- Static part of the perception, that one that doesn't change depending of the player is precomputed.
- Added Python RP rules system.
- Added mapacman game.
- Added messages timestamps so that it is more reliable on bad UDP connections.
- Factorized createaccount method, each application has now to modify a very small part of it.
- Updated documentation about Marauroa.
- Added proper shutdown procedure.
- Fixed the bug that allows players to vote several times.
- Added RPMap message

0.32 	Apr 21, 2004
- Fix a bug that happens when an object is added and deleted on the same turn from a slot.
- Added modification of the network protocol to send our RPObject only when changed
- Fixed a path related problem with create account
- Fixed an issue that rejects the creation of database on the first run.

0.31	Apr 14, 2004
- Added Delta-delta perception so now only diffs between actual and previous object is send.
- Change attributes name to save even more bandwidth

0.30	Mar 26, 2004
- Added persistent objects
- Added transactional database support
- Fixed zlib compression problem due to incorrect deserialization
- Send less TOTAL perceptions so it improve bandwidth usage
- A ton of little bugs/features fixed/added

0.25	Mar	06,	2004
- Added zlib compression
- Added Buy item and Buy gladiator
- Added completely access to our gladiator inventory
- The rest of Players has their gladiators and items hidden.
- Fixed a bug that make HP not to be restored if you logout before request fame ends

0.24	Mar 02,	2004
- Fixed SQL bug that can cause a denial of service on server
- Fixed bug on Fame to be assigned to winner
- Fixed correctly the no-winner situation
- Fixed test cases to correctly pass the PlayerEntryContainer

0.23	Feb 15,	2004
- Added chat
- Added statistics
- Added W3C Events Log format
- Fixed synchronization bug
- Fixed a bug that makes arena to not be able to exit from fight state

0.22 	Feb 06, 2004
- Fixed JDBC problem with accounts
- Fixed stupid problem on createaccount
- Combat does end now
- Fame is added now to winner

0.21 	Jan 31, 2004
- Fixed security problem at JDBCDatabase
- Fixed delta perception
- Add a commandline tool to add new players
- Improved Gladiators server logic

0.20	Jan 26, 2004
- Implemented Gladiators
- Fixed several problems at server
- API stabilized

0.11	Dic 21, 2003
- Maraurorized simpleGame
- Fixed several logical bugs in simpleGame
- Fixed bugs

0.10 	Dic 16, 2003
- simpleGame working.
- sound support
- First steps of Gladiators

0.04 	Dic 11, 2003
- Fixed FATAL bug at NetworkServerManager and JMarauroa
- Added ServerInfo message

0.03	Dic 09, 2003
- Delta Perception
- Full RPZone and RuleProcessor
- Full test cases
- Multipacket UDP communication protocol
- Updated documentation
- Fixed bugs

0.02	Nov 30, 2003
- Added Perception message
- Added JDBC Database
- Added RP Code: Hacked and Slashed 
- Fixed bugs:
- Fixed Traces output

0.01	Nov 22, 2003
- Initial release
- Complete Network Protocol
- Memory Database


Legal
-----
Marauroa(c) is copyright of Miguel Angel Blanch Lardin, 2003-2004
arianne_rpg at users dot sourceforge dot net
