Title  : Actions Explained
Info   : Deep overview of actions, its types and its usage.
Keyword: actions, classes, types, XML, attributes.
Author : Miguel Angel Blanch Lardin
Created: 2003/10/23
status : planning

NOTE: This documents related to an early specification of Gladiators and is no 
longer relevant as it refers to specification, but can help you to know how to 
make the basic steps to define a game.

Arianne Game is based on several actions that are a MUST for the correct 
development of the game.
Mainly these actions are:
- Talk
- Move
- Object handling
  - Get 
  - Release
  - Use
  - Use with
  - Exchange

These actions has their own attributes so that they can be useful for the game
itself. 
Let's see these attributes and what each action is intended to be for.
As common attributes, every action has the type attribute that express the type
of Action that it is, and the sourceid express the object that is casting the 
action, but this attribute is filled on server rather than in client.


Action Talk
This action is intended to express what the character wants to say. As that it 
is sent from client to server.
Action has this next set of attributes:
- type
- sourceid
- talk_text

The talk_text attribute is for containing the text that send the client.


Action Move
This action is intended to indicate the willing to move from one point to 
another point.
Action has this set of attributes:
- type
- sourceid
- move_to
- move_speed

The move_to is a Position <x,y>, in the system the Z is a fake, as there is no 
technology ready for using a huge world with multiple levels. The move_speed is
also a <x,y> meaning the increase of positions per turns.
This action should take care of:
- Collision detection
- Path finding


Action Get
This action is intended to indicate the action of taking one object from floor.
Action has this set of attributes:
- type
- sourceid
- get_objectid
- get_toSlot

The get_objectid is the RPObject.ID of the object we want to get and the 
get_toSlot attribute is the Slot of the character that send the action where 
the object is placed.
This action has several limitations: 
- You can't get players
- The destination slot must be free


Action Release
This action is the contrary of Get, and it is used to drop an object from an 
Slot.
Action has this set of attributes:
- type
- sourceid
- release_fromSlot
- release_objectid

The release_fromSlot is the slot that contains the object pointed by 
release_objectid.
The only limitation of this action is that of course the object MUST be there.


Action Use
This action makes the object to perform the expected action from them. 
This action is a real good candidate for scripting.
Action has this set of attributes:
- type
- sourceid
- use_objectid

The use_objectid attribute point the object to use. By now we will only have 
one default Use, later we can add extra attributes to the action.


Action UseWith
This action is closely related with Use action, the difference is that we use
ObjectA with ObjectB so that the state of ObjectA is modified, ObjectB may be
modified as well.
Action has this set of attributes:
- type
- sourceid
- usewith_objectidA
- usewith_objectidB

The usewith_objectidA refers to the Object that is the center of the action and 
usewith_objectidB is the catalyzer of the action. For example a door and a key 
respectively.


Action Exchange
This action is use to exchange an object between two characters.
Action has this set of attributes:
- type
- sourceid
- exchange_sourceSlot
- exchange_destObjectid
- exchange_destSlot

The exchange_sourceSlot is the slot of the source character that owns one of 
the objects and the exchange_destObjecid is the other object and 
exchange_destSlot is the slot where the other object is.
The action MUST be executed by both peers on the same terms so they agree and
the action is executed.


Action replies are placed inside Objects and sent to clients as perceptions, so 
please refer to the Action reply in "Objects Explained" document.
