Title  : GameManager explained
Info   : Description of the GameManager and its purpouse.
Keyword: GameManager, NetworkManager
Author : Miguel Angel Blanch Lardin
Created: 2003/09/26
status : planning

The main idea behind GameManager is to handle all the "business logic", so this
Manager decides about every reply to each individual message.

The logic is something like:

GameManager
  {
  NetworkManager read Message
  
  switch(Message type)
    {
    case ...;
    }  
  }

So let's define the reply to each message.
Before explaining each message processing, let's clarify that the best way of 
modelling this system is using finite automates, where based on the input we 
change state and produce an output.

Process C2S Login ( STATE_BEGIN_LOGIN )
  Precondition: The state MUST be NULL
  
  Test if there is room for more players.
  if there are not more room 
    {
    reply S2C Login NACK( SERVER_FULL )
    state = NULL
    }
    
  if check username,password in database is correct
    {
    create clientid
    add PlayerEntry
    notify database

    reply S2C Login ACK
    
    get characters list of the player
    reply S2C CharacterList
    
    state = STATE_LOGIN_COMPLETE
    }
  else
    {
    notify database

    reply S2C Login NACK( LOGIN_INCORRECT )
    state = NULL
    }
    
  Postcondition: The state MUST be NULL or STATE_LOGIN_COMPLETE
    and a PlayerEntry for this player with an unique correct clientid.
    

Process C2S ChooseCharacter ( STATE_LOGIN_COMPLETE )
  Precondition: The state MUST be STATE_LOGIN_COMPLETE
  
  if exist in database character
    {
    add character to Player's PlayerEntry
    add character to game
    reply S2C Choose Character ACK
    
    state = STATE_GAME_BEGIN
    }
  else
    {
    reply S2C Choose Character NACK
    state = STATE_LOGIN_COMPLETE
    }
    
  Postcondition: The state MUST be STATE_GAME_BEGIN and the PlayerStructure 
    being completly filled now or state is STATE_LOGIN_COMPLETE
    
    
Process C2S Logout ( STATE_GAME_END )
  Precondition: The state can be whatever but STATE_LOGIN_BEGIN
  
  if( rpEngine allows player to logout )
    {
    reply S2C Logout ACK
    state = NULL
    
    store character in database
    remove character from game
    delete PlayerEntry
    }
  else
    {
    reply S2C Logout NACK
    }
    
  Postcondition: Either is the same that the input state or the state is 

Process C2S Perception ACK
  Precondition: The state must be STATE_LOGIN_BEGIN
  
  notify that the player recieved the perception.
  
  Postcondition: The state is STATE_LOGIN_BEGIN and Timestamp field in 
  PlayerContainer is updated.