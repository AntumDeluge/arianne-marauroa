<p>
<b>Title  :</b> UDP Packet Format<br>
<b>Info   :</b> Description of the internal structure of an UDP Packet for Marauroa<br>
<b>Keyword:</b> UDP, packet, net, TCP/IP, client, Message, Protocol<br>
<b>Author :</b> Miguel Angel Blanch Lardin<br>
<b>Created:</b> 2003/08/26<br>
<b>status :</b> planning<p>

It is based on Messages transmited using UDP Packets.<br>
Each message is selfcontained on a SINGLE UDP Packet, and there isn't any 
mechanism to recovery from lost messages or repeated ones.<p>

Each UDP Packet is composed of:<ul>
<li>Protocol version ( 1 byte           )</li>
<li>Type of Message  ( 1 byte           )</li>
<li>Client ID        ( 2 bytes          )</li>
<li>Rest of Message  ( up to 1496 bytes )</li>
</ul>

Messages are sent from server by simply serializing them.<br>
So the message itself contains the protocol version, the type of message and
the clientid.<p>

To recieve the message is a bit more complex.<br>
We need to determine that we are running a compatible version of the protocol,
once we have agreed that the protocol is compatible we read type of message 
and we ask a MessageFactory ( "Java Design Patterns" ) to build an object of
that type with the data.<br>
Once the message is build we simply store it on a queue of incomming messages 
waiting to be processed.<p>

<pre>
Thread Read
  {
  recieve UDP

  if(Packet[0]==PROTOCOL_VERSION)
    {
    push MessageFactory.getMessage(Packet[1])
    }
  }

Thread Write
  {
  send UDP
  } 
</pre>
